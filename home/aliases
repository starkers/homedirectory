#####GIT

alias ga="git add --all ."
alias gps="git push"
alias gpl="git pull -ff"
alias gs="git status"
alias gc="my_git_commit"
alias gd="git d"  #call git diff with vimdiff

alias mplayer="mpv"

alias dc="docker-compose"
alias dps="docker ps --quiet "$@" | xargs --no-run-if-empty docker inspect --format='{{printf "%.12s" .Id}}|{{.Config.Image}}|{{printf "%.19s" .State.StartedAt}}|{{.State.Status}}|{{range $net, $conf := .NetworkSettings.Networks}}{{$net}}:{{$conf.IPAddress}} {{end}}|{{.Name}}' | column -t -s '|'"

alias vim="nvim"
alias sternalltail="stern --all-namespaces --tail 10"
# release any files vim thinks are +ro
alias vim_swp_clear="rm -rvf ~/.vim/tmp/*.swp"

alias vimdiff="nvim -d"
#protip.. use vimdiff/meld
# git config --global diff.tool nvim -d
# git config --global difftool.prompt false
# git config --global alias.d difftool


alias lg="lazygit"
alias ls="ls --color"
alias ll="ls -l"
alias lla="ls -la"
alias ltr="ls -ltr"


alias snap="sudo snap"
alias apts="apt-cache search"
alias apti="sudo apt-get install"
alias apt="sudo apt"
alias ssh="ssh -A"
alias pacman="sudo pacman"
alias ssh-copy-id-work="ssh-copy-id -i ~/.ssh/id_rsa"
alias ssh-copy-id-clovis="ssh-copy-id -i ~/.ssh/id_rsa_clovis"

alias cdb="cd ~/bin"
alias cdd="cd ~/dev"
alias cdD="cd ~/Downloads"
alias cds="cd ~/Seafile"
# alias cdm="cd ~/master"
alias cdw="cd ~/work"
alias cdh="cd ~/dev/github.com/starkers/homedirectory/home"
alias cdg="cd ~/dev/github.com"
alias cdt="cd ~/Torrents"

alias ansible_dev="cd ~/dev/ansible ; source ./hacking/env-setup -q"

#alias cdv="cd ~/files/vagrant"

alias mtr="mtr --curses"

alias d="docker"

alias lxc="sudo lxc"
alias lxd="sudo lxd"

alias vim-clear-tmp-and-swap="rm -rf ~/.config/nvim/tmp/tmp/*.sw*"
alias nload="sudo nload wlan0 -u K"

alias atop="sudo atop"


# alias aws="awssudo sainsburys aws"


alias openvpn="sudo openvpn"

# mem(){
#   printf " Private  +   Shared  =  RAM used       Program\n"
#   sudo ~/.bin/psmem_exec | tail -30
# }

pf(){
  peerflix "$1" --mplayer
}


# alias k="kubectl --kubeconfig=$KCONFIG"
#
alias systemctl="sudo systemctl"


ghc(){
  # githubclone
  # takes a github URL like:
  # - git@github.com:containous/traefik.git or
  # - https://@github.com/containous/traefik.git
  #
  # will clone into ~/dev/github.com/containous/traefik (if its not checked out yet)
  # will drop you in that directory
  local DEV="$HOME/dev/github.com"
  local INPUT="$1"
  # if the URL is in https format convert it to ssh
  if grep -q "github" <<<"${INPUT}" ; then
    local INPUT="$(sed 's+https://github.com/+git@github.com:+g' <<<${INPUT})"
  fi

  if grep -q github <<<"${INPUT}"; then
    local GH_URL="${INPUT}"
    local GH_USER="$(echo $GH_URL | cut -d ":" -f 2 | cut -d "/" -f 1)"
    local GH_REPO="$(echo $GH_URL | cut -d ":" -f 2 | cut -d "/" -f 2 | sed "s+.git++g")"
    local CHECKOUT="${DEV}/${GH_USER}/${GH_REPO}"
    if [ -d "$CHECKOUT" ]; then
      echo "doing nothing, $CHECKOUT already exists"
    else
      echo "checking out $GH_URL -> $CHECKOUT"
      set -x
      mkdir "${DEV}/${GH_USER}" -p
      git clone "$GH_URL" "$CHECKOUT"
      set +x
    fi
    cd "$CHECKOUT"
  else
    echo "sorry.. ${INPUT} doesnt look like a github URL"
  fi
}


# git grab (for) geeks

# always clone into ~/somewhere/<server>/<project>  #you set "~/somewhere"
# option to try convert https URLs to ssh://git@ (TODO)
# if dest dir already exists just CD in there


function ggg(){
  local store="${HOME}/dev"

  local in="$1"
  local outname="ggg"
  function gsay() { echo -e "\e[34m${outname}: $*\e[0m" >&2 ; }
  function gerr() { echo -e "\e[31m${outname}: ${@}\e[0m"   ; }
  function gdie() { gerr "$*" ; return 111 ; }
  function try() { gsay "$@" ; "$@" || gdie "cannot $*" ; }
  echo $1

  function gparse_git(){
    local chunk1="$(cut -d "@" -f 1 <<<"$1")"
    local chunk2="$(echo "$1" | cut -d "@" -f 2 | cut -d "/" -f 1 | cut -d ":" -f 1)"
    # does the git url have ports or go directly into "group/repo" ?
    # if its got more than three colons then ports are in the mix (and foo is not empty)
    local foo="$(echo $1 | cut -d ":" -f 3)"
    if [ ! "${foo}" = "" ]; then
      local chunk3="$(echo "$1" | cut -d "@" -f 2 | cut -d "/" -f 2-99| sed "s+.git$++g" )"
    else
      echo "oop"
      local chunk3="$(echo "$1" | cut -d ":" -f 2 | cut -d "/" -f 1-99| sed "s+.git$++g" )"
    fi
    local dest="${store}/${chunk2}/${chunk3}"
    if [ ! -d "${dest}" ]; then
      try git clone "${in}" "${dest}"
    fi
    try cd "${dest}"
    gsay "proto:${chunk1}, host:${chunk2}, repo:${chunk3}  -> ${dest}"
  }

  function gparse_http(){
    local chunk2="$(echo "$1" | cut -d "/" -f 3 | cut -d ":" -f 1)"
    local chunk3="$(echo "$1" | cut -d "/" -f 4-99 | sed "s+.git++g" )"
    local dest="${store}/${chunk2}/${chunk3}"
    if [ ! -d "${dest}" ]; then
      try git clone "${in}" "${dest}"
    fi
    try cd "${dest}"
  }

  if grep -q "^http://" <<<"${in}" ; then
    gparse_http "${in}"
  elif grep -q "^https://" <<<"${in}" ; then
    gparse_http "${in}"
  elif grep -q "^git@" <<<"${in}"; then
    gparse_git "${in}"
  elif grep -q "^ssh://.*@" <<<"${in}"; then
    gparse_git "${in}"
  else
    gdie "sorry couldn't match ${in} to any kind of git URL"
  fi

}

alias fastboot="sudo fastboot"

PRIVATE_ALIASES_FILE=/keybase/private/starkers/shell-aliases
if [ -f "${PRIVATE_ALIASES_FILE}" ]; then
  source "${PRIVATE_ALIASES_FILE}"
fi
