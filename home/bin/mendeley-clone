#!/usr/bin/env bash

RootDir=${HOME}/dev/mendeley

function ok(){
  echo -e "\e[32m${@}\e[0m"
}

function err(){
  echo -e "\e[31m${@}\e[0m"
}

yell() { echo -e "\e[34m$script_name: $*\e[0m" >&2 ; }
die() { err "$*"; exit 111; }
try() { "$@" || die "cannot $*"; }


if [ ! -d "$RootDir" ]; then
  ok creating "$RootDir"
  try mkdir -p "$RootDir"
fi

input="$@"

repo="$(echo "$input" | cut -d " " -f 1)"  #strip down any input flags to $1


function CloneOrPull(){
  src="$1"
  dest="$2"
  set +e
  if [ ! -d "$dest" ]; then
    yell "cloning $src > $dest"
    git clone "$src" "$dest"
    echo "#####   cd $dest"
  else
    yell "$dest exists.. checking for git"
    if [ -d "$dest/.git" ]; then
      yell "$dest contains .git, attempting a 'git pull -ff' for you"
      cd "$dest"
      git pull -ff
      rc="$?"

      echo "#####   cd $dest"
      exit "$rc"
    else
      yell "Warning $dest exists but doesn't contain a .git dir.."
    fi
  fi
  set -e
}


function clone-gitlab (){
  yell matched ${1} to gitlab
  short_name=gitlab
  parent="$(echo "$1" | cut -d ":" -f 2 | cut -d "/" -f 1 )"
  child="$( echo "$1" | cut -d "/" -f 2 | cut -d "." -f 1 )"
  LocalDir="$RootDir/${short_name}/${parent}/${child}"
  yell "${LocalDir}"

  CloneOrPull "${1}" "${LocalDir}"
}

function clone-stash (){
  yell matched ${1} to stash
  short_name=stash
  parent="$(cut -d "/" -f 4 <<< "${1}")"
  child="$( echo "$1" | cut -d "/" -f 5 | cut -d "." -f 1)"
  LocalDir="$RootDir/${short_name}/${parent}/${child}"
  yell "${LocalDir}"

  CloneOrPull "${1}" "${LocalDir}"
}


if [ -z "$repo" ]; then
  yell what repo?
  exit 1
else

  # match the hostname of the git-repo hopefully(stash/gitlab?)
  if grep -q "git@gitlab.et-scm.com" <<< "${repo}" ; then
    clone-gitlab "${repo}"
  elif grep -q "ssh://git@git.mendeley.com:7999" <<< "${repo}" ; then
    clone-stash "${repo}"
  else
    err unable to match ${repo} to any known repos
  fi

fi
