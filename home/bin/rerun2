#!/usr/bin/env bash

# USAGE:
#
#   rerun COMMAND
#
# Reruns COMMAND on every filesystem modify/create/delete event in the current
# directory. Useful for things like running tests whenever you hit 'save' in
# your editor.
#
# COMMAND is evaluated by Bash before it gets passed to rerun. To prevent this
# you must quote or escape things.
#
# Rerun does not implicitly re-evaluate the command on every iteration, it just
# executes it.
#
# Hence, if a command consists of more than "EXE arg1 arg2 ...", i.e. you need
# Bash to evaluate the command before executing it, e.g. it is a compound
# command featuring things like ';' or '&&' or '|', then you need to explicitly
# execute your command in a subshell that will do this evaluation. For example,
# I frequently like to clear the screen then run tests:
#
#   clear; python -m unittest discover
#
# you cannot pass this to 'rerun' directly, because the compound nature of the
# command needs a shell to interpret it. Hence you must:
#
#   rerun sh -c "clear; python -m unittest discover"
#
# Rerun will execute the whole "sh -c "..."" command on every iteration.
# and 'sh', when invoked, will interpret the compound command
# it has been given. ("clear; python...")
#
# For some reason 'rerun' doesn't currently work if COMMAND contains shell
# aliases. It thought it would work if rerun were sourced using a preceding dot:
#
#   . rerun COMMAND
#
# But it doesn't. If anyone knows how to fix this I'd love to hear about it.
#
# Some test cases:
#
#   rerun ls "some file" # Used to fail in early versions of rerun.
#
#   rerun ls some* # Used to fail in early versions of rerun,
#                  # due to spaces in matching filenames.
#
#   rerun date # Should update the displayed date on every iteration.
#
# TODO: I can't get shell aliases to work. :-( e.g: $ rerun ll ll: Command not
# found $ . rerun ll ll: Command not found
#
# TODO: We currently ignore './.git' directories. I should add the others.
# Can the user specify their own regexes?

# Events that occur within this time from an initial one are ignored
IGNORE_SECS=0.25

function execute() {
    echo "$@"
    "$@"
}

execute "$@"
ignore_until=$(date +%s.%N)

inotifywait --quiet --recursive --monitor --format "%e %w%f" \
    --event modify --event move --event create --event delete \
    --exclude '__pycache__' \
    * | while read changed
do

    echo "$changed"

    if [ $(echo " $(date +%s.%N) > $ignore_until" | bc) -eq 1 ] ; then
        ignore_until=$(echo "$(date +%s.%N) + $IGNORE_SECS" | bc)
        ( sleep $IGNORE_SECS ; execute "$@" ) &
    fi

done

